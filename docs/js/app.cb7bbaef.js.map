{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?a24d","webpack:///./src/components/MLSimpleDecisionTreeClassifier.vue?c60c","webpack:///./src/lib/decision-tree.js","webpack:///src/components/MLSimpleDecisionTreeClassifier.vue","webpack:///./src/components/MLSimpleDecisionTreeClassifier.vue?9d59","webpack:///./src/components/MLSimpleDecisionTreeClassifier.vue","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue","webpack:///./src/components/MLCartClassifier.vue?6428","webpack:///src/components/MLCartClassifier.vue","webpack:///./src/components/MLCartClassifier.vue?1ae5","webpack:///./src/components/MLCartClassifier.vue","webpack:///./src/main.js","webpack:///./src/App.vue?f81e","webpack:///./src/components/MLCartClassifier.vue?1eda","webpack:///./src/components/MLSimpleDecisionTreeClassifier.vue?c9e1"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Appvue_type_template_id_fd3e5a5e_render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","id","src","element","img","type","on","click","$event","addElementToTrainingSet","features","_v","_s","_e","training-set","trainingSet","staticRenderFns","MLSimpleDecisionTreeClassifiervue_type_template_id_5e612109_render","prediction","domProps","innerHTML","tree","MLSimpleDecisionTreeClassifiervue_type_template_id_5e612109_staticRenderFns","dt","DecisionTree","builder","root","buildDecisionTree","ignoredAttributes","arrayToHashSet","categoryAttr","minItemsCount","entropyThrehold","maxTreeDepth","RandomForest","treesNumber","trees","buildRandomForest","array","hashSet","attr","countUniqueValues","items","counter","entropy","Math","log","split","predicate","pivot","item","attrValue","match","notMatch","mostFrequentValue","mostFrequentCount","predict","predictRandomForest","predicates","==","a","b",">=","category","initialEntropy","alreadyChecked","bestSplit","gain","predicateName","attrPredPivot","currSplit","matchEntropy","notMatchEntropy","newEntropy","currGain","attribute","matchSubTree","notMatchSubTree","matchedCount","notMatchedCount","trainingSets","correspondingTree","forest","MLSimpleDecisionTreeClassifiervue_type_script_lang_js_","props","components","computed","methods","classify","config","decisionTree","decision_tree","toPredict","console","treeToHtml","join","mounted","watch","newTrainingSet","oldTrainingSet","components_MLSimpleDecisionTreeClassifiervue_type_script_lang_js_","component","componentNormalizer","options","__file","MLSimpleDecisionTreeClassifier","Appvue_type_script_lang_js_","allData","getTrainingSet","instance","jquery_default","getJSON","setRandomElementFromTrainingSet","index","floor","random","label","src_Appvue_type_script_lang_js_","App_component","App","MLCartClassifiervue_type_template_id_d47fb844_render","MLCartClassifiervue_type_template_id_d47fb844_staticRenderFns","MLCartClassifiervue_type_script_lang_js_","transformToMatrix","listOfFeatureMaps","classFieldName","ignoreFields","arguments","undefined","listOfVectors","map","elem","transformFeatureMapToVector","featureMap","returnVal","keys","val","indexOf","getUniqueClasses","classEntries","getClassVectorFromFeatureMap","getClassesFromVector","predictionsVector","classNum","getFieldNameForIndex","idx","returnKey","getLeafLabel","probs","labels","htmlText","iCnt","sClass","treeNode","left","right","distribution","getRow","splitColumn","splitValue","trainingMatrix","classVector","gainFunction","maxDepth","minNumSamples","predictions","classifier","ml_cart_src","train","toJSON","components_MLCartClassifiervue_type_script_lang_js_","MLCartClassifier_component","MLCartClassifier","Vue","use","BootstrapVue","render","h","$mount","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MLCartClassifier_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MLCartClassifier_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MLSimpleDecisionTreeClassifier_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MLSimpleDecisionTreeClassifier_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/app.cb7bbaef.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container mt-5\",attrs:{\"id\":\"main\"}},[(_vm.element)?_c('div',{staticClass:\"selectionContainer\"},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-6 img\"},[_c('img',{attrs:{\"src\":_vm.element.img}})])]),_c('div',{staticClass:\"row mt-5\"},[_c('div',{staticClass:\"col-md-3 m-auto\"},[_c('button',{staticClass:\"btn btn-lg btn-outline-primary float-left\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){_vm.addElementToTrainingSet(_vm.features[0])}}},[_vm._v(_vm._s(_vm.features[0]))]),_c('button',{staticClass:\"btn btn-lg btn-outline-primary float-right\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){_vm.addElementToTrainingSet(_vm.features[1])}}},[_vm._v(_vm._s(_vm.features[1]))])])])]):_vm._e(),_c('div',{staticClass:\"mt-5 text-center\"},[_c('h2',[_vm._v(\"Decision tree:\")]),_c('ml-simple-dt-classifier',{attrs:{\"training-set\":_vm.trainingSet,\"element\":_vm.element}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-3 mt-5\"},[(_vm.prediction)?_c('h4',[_vm._v(\"My prediction : \"+_vm._s(_vm.prediction))]):_vm._e()]),_c('div',{staticClass:\"col-md-12 treeContainer mt-5\"},[_c('div',{staticClass:\"tree\",domProps:{\"innerHTML\":_vm._s(_vm.tree)}})])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* eslint-disable */\nvar dt = (function () {\n          \n    /**\n     * Creates an instance of DecisionTree\n     *\n     * @constructor\n     * @param builder - contains training set and\n     *                  some configuration parameters\n     */\n    function DecisionTree(builder) {        \n        this.root = buildDecisionTree({\n            trainingSet: builder.trainingSet,\n            ignoredAttributes: arrayToHashSet(builder.ignoredAttributes),\n            categoryAttr: builder.categoryAttr || 'category',\n            minItemsCount: builder.minItemsCount || 1,\n            entropyThrehold: builder.entropyThrehold || 0.01,\n            maxTreeDepth: builder.maxTreeDepth || 70\n        });\n    }\n          \n    DecisionTree.prototype.predict = function (item) {\n        return predict(this.root, item);\n    }\n\n    /**\n     * Creates an instance of RandomForest\n     * with specific number of trees\n     *\n     * @constructor\n     * @param builder - contains training set and some\n     *                  configuration parameters for\n     *                  building decision trees\n     */\n    function RandomForest(builder, treesNumber) {\n        this.trees = buildRandomForest(builder, treesNumber);\n    }\n          \n    RandomForest.prototype.predict = function (item) {\n        return predictRandomForest(this.trees, item);\n    }\n    \n    /**\n     * Transforming array to object with such attributes \n     * as elements of array (afterwards it can be used as HashSet)\n     */\n    function arrayToHashSet(array) {\n        var hashSet = {};\n        if (array) {\n            for(var i in array) {\n                var attr = array[i];\n                hashSet[attr] = true;\n            }\n        }\n        return hashSet;\n    }\n    \n    /**\n     * Calculating how many objects have the same \n     * values of specific attribute.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute, \n     *                which embedded in each object\n     */\n    function countUniqueValues(items, attr) {\n        var counter = {};\n\n        // detecting different values of attribute\n        for (var i = items.length - 1; i >= 0; i--) {\n            // items[i][attr] - value of attribute\n            counter[items[i][attr]] = 0;\n        }\n          \n        // counting number of occurrences of each of values\n        // of attribute\n        for (var i = items.length - 1; i >= 0; i--) {\n            counter[items[i][attr]] += 1;\n        }\n\n        return counter;\n    }\n    \n    /**\n     * Calculating entropy of array of objects \n     * by specific attribute.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute, \n     *                which embedded in each object\n     */\n    function entropy(items, attr) {\n        // counting number of occurrences of each of values\n        // of attribute\n        var counter = countUniqueValues(items, attr);\n\n        var entropy = 0;\n        var p;\n        for (var i in counter) {\n            p = counter[i] / items.length;\n            entropy += -p * Math.log(p);\n        }\n\n        return entropy;\n    }\n          \n    /**\n     * Splitting array of objects by value of specific attribute, \n     * using specific predicate and pivot.\n     *\n     * Items which matched by predicate will be copied to \n     * the new array called 'match', and the rest of the items \n     * will be copied to array with name 'notMatch'\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute,\n     *                which embedded in each object\n     *\n     * @param predicate - function(x, y) \n     *                    which returns 'true' or 'false'\n     *\n     * @param pivot - used as the second argument when \n     *                calling predicate function:\n     *                e.g. predicate(item[attr], pivot)\n     */\n    function split(items, attr, predicate, pivot) {\n        var match = [];\n        var notMatch = [];\n\n        var item,\n            attrValue;\n          \n        for (var i = items.length - 1; i >= 0; i--) {\n            item = items[i];\n            attrValue = item[attr];\n\n            if (predicate(attrValue, pivot)) {\n                match.push(item);\n            } else {\n                notMatch.push(item);\n            }\n        }\n\n        return {\n            match: match,\n            notMatch: notMatch\n        };\n    }\n\n    /**\n     * Finding value of specific attribute which is most frequent\n     * in given array of objects.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute, \n     *                which embedded in each object\n     */\n    function mostFrequentValue(items, attr) {\n        // counting number of occurrences of each of values\n        // of attribute\n        var counter = countUniqueValues(items, attr);\n\n        var mostFrequentCount = 0;\n        var mostFrequentValue;\n\n        for (var value in counter) {\n            if (counter[value] > mostFrequentCount) {\n                mostFrequentCount = counter[value];\n                mostFrequentValue = value;\n            }\n        }\n\n        return mostFrequentValue;\n    }\n          \n    var predicates = {\n        '==': function (a, b) { return a == b },\n        '>=': function (a, b) { return a >= b }\n    };\n\n    /**\n     * Function for building decision tree\n     */\n    function buildDecisionTree(builder) {\n\n        var trainingSet = builder.trainingSet;\n        var minItemsCount = builder.minItemsCount;\n        var categoryAttr = builder.categoryAttr;\n        var entropyThrehold = builder.entropyThrehold;\n        var maxTreeDepth = builder.maxTreeDepth;\n        var ignoredAttributes = builder.ignoredAttributes;\n\n        if ((maxTreeDepth == 0) || (trainingSet.length <= minItemsCount)) {\n            // restriction by maximal depth of tree\n            // or size of training set is to small\n            // so we have to terminate process of building tree\n            return {\n                category: mostFrequentValue(trainingSet, categoryAttr)\n            };\n        }\n\n        var initialEntropy = entropy(trainingSet, categoryAttr);\n\n        if (initialEntropy <= entropyThrehold) {\n            // entropy of training set too small\n            // (it means that training set is almost homogeneous),\n            // so we have to terminate process of building tree\n            return {\n                category: mostFrequentValue(trainingSet, categoryAttr)\n            };\n        }\n\n        // used as hash-set for avoiding the checking of split by rules\n        // with the same 'attribute-predicate-pivot' more than once\n        var alreadyChecked = {};\n          \n        // this variable expected to contain rule, which splits training set\n        // into subsets with smaller values of entropy (produces informational gain)\n        var bestSplit = {gain: 0};\n\n        for (var i = trainingSet.length - 1; i >= 0; i--) {\n            var item = trainingSet[i];\n\n            // iterating over all attributes of item\n            for (var attr in item) {\n                if ((attr == categoryAttr) || ignoredAttributes[attr]) {\n                    continue;\n                }\n\n                // let the value of current attribute be the pivot\n                var pivot = item[attr];\n\n                // pick the predicate\n                // depending on the type of the attribute value\n                var predicateName;\n                if (typeof pivot == 'number') {\n                    predicateName = '>=';\n                } else {\n                    // there is no sense to compare non-numeric attributes\n                    // so we will check only equality of such attributes\n                    predicateName = '==';\n                }\n\n                var attrPredPivot = attr + predicateName + pivot;\n                if (alreadyChecked[attrPredPivot]) {\n                    // skip such pairs of 'attribute-predicate-pivot',\n                    // which been already checked\n                    continue;\n                }\n                alreadyChecked[attrPredPivot] = true;\n\n                var predicate = predicates[predicateName];\n          \n                // splitting training set by given 'attribute-predicate-value'\n                var currSplit = split(trainingSet, attr, predicate, pivot);\n\n                // calculating entropy of subsets\n                var matchEntropy = entropy(currSplit.match, categoryAttr);\n                var notMatchEntropy = entropy(currSplit.notMatch, categoryAttr);\n\n                // calculating informational gain\n                var newEntropy = 0;\n                newEntropy += matchEntropy * currSplit.match.length;\n                newEntropy += notMatchEntropy * currSplit.notMatch.length;\n                newEntropy /= trainingSet.length;\n                var currGain = initialEntropy - newEntropy;\n\n                if (currGain > bestSplit.gain) {\n                    // remember pairs 'attribute-predicate-value'\n                    // which provides informational gain\n                    bestSplit = currSplit;\n                    bestSplit.predicateName = predicateName;\n                    bestSplit.predicate = predicate;\n                    bestSplit.attribute = attr;\n                    bestSplit.pivot = pivot;\n                    bestSplit.gain = currGain;\n                }\n            }\n        }\n\n        if (!bestSplit.gain) {\n            // can't find optimal split\n            return { category: mostFrequentValue(trainingSet, categoryAttr) };\n        }\n\n        // building subtrees\n          \n        builder.maxTreeDepth = maxTreeDepth - 1;\n\n        builder.trainingSet = bestSplit.match;\n        var matchSubTree = buildDecisionTree(builder);\n\n        builder.trainingSet = bestSplit.notMatch;\n        var notMatchSubTree = buildDecisionTree(builder);\n\n        return {\n            attribute: bestSplit.attribute,\n            predicate: bestSplit.predicate,\n            predicateName: bestSplit.predicateName,\n            pivot: bestSplit.pivot,\n            match: matchSubTree,\n            notMatch: notMatchSubTree,\n            matchedCount: bestSplit.match.length,\n            notMatchedCount: bestSplit.notMatch.length\n        };\n    }\n\n    /**\n     * Classifying item, using decision tree\n     */\n    function predict(tree, item) {\n        var attr,\n            value,\n            predicate,\n            pivot;\n        \n        // Traversing tree from the root to leaf\n        while(true) {\n          \n            if (tree.category) {\n                // only leafs contains predicted category\n                return tree.category;\n            }\n\n            attr = tree.attribute;\n            value = item[attr];\n\n            predicate = tree.predicate;\n            pivot = tree.pivot;\n\n            // move to one of subtrees\n            if (predicate(value, pivot)) {\n                tree = tree.match;\n            } else {\n                tree = tree.notMatch;\n            }\n        }\n    }\n\n    /**\n     * Building array of decision trees\n     */\n    function buildRandomForest(builder, treesNumber) {\n        var items = builder.trainingSet;\n          \n        // creating training sets for each tree\n        var trainingSets = [];\n        for (var t = 0; t < treesNumber; t++) {\n            trainingSets[t] = [];\n        }\n        for (var i = items.length - 1; i >= 0 ; i--) {\n          // assigning items to training sets of each tree\n          // using 'round-robin' strategy\n          var correspondingTree = i % treesNumber;\n          trainingSets[correspondingTree].push(items[i]);\n        }\n\n        // building decision trees\n        var forest = [];\n        for (var t = 0; t < treesNumber; t++) {\n            builder.trainingSet = trainingSets[t];\n\n            var tree = new DecisionTree(builder);\n            forest.push(tree);\n        }\n        return forest;\n    }\n\n    /**\n     * Each of decision tree classifying item\n     * ('voting' that item corresponds to some class).\n     *\n     * This function returns hash, which contains \n     * all classifying results, and number of votes \n     * which were given for each of classifying results\n     */\n    function predictRandomForest(forest, item) {\n        var result = {};\n        for (var i in forest) {\n            var tree = forest[i];\n            var prediction = tree.predict(item);\n            result[prediction] = result[prediction] ? result[prediction] + 1 : 1;\n        }\n        return result;\n    }\n\n    var exports = {};\n    exports.DecisionTree = DecisionTree;\n    exports.RandomForest = RandomForest;\n    return exports;\n})();\n\nexport default dt;\n/* eslint-enable */","<template>\n    <div class=\"row\">\n        <div class=\"col-md-3 mt-5\">\n            <h4 v-if=\"prediction\">My prediction : {{ prediction }}</h4>\n        </div>\n        <div class=\"col-md-12 treeContainer mt-5\">\n            <div class=\"tree\" v-html=\"tree\"></div>\n        </div>\n\n    </div>\n</template>\n<script>\n    import dt from '../lib/decision-tree';\n\n    export default {\n        props: [\n            'trainingSet',\n            'element'\n        ],\n        components: {\n        },\n        data() {\n            return {\n                tree: null,\n                prediction: null\n            }\n        },\n        computed: {\n        },\n        methods: {\n            classify() {\n                // Configuration\n                let config = {\n                    trainingSet: this.trainingSet,\n                    categoryAttr: 'label',\n                    ignoredAttributes: ['img']\n                };\n\n                // Building Decision Tree\n                let decisionTree = new dt.DecisionTree(config);\n\n                // Testing Decision Tree and Random Forest\n                let toPredict = this.element;\n\n                this.prediction = decisionTree.predict(toPredict);\n                console.log(\"tree\", decisionTree);\n                console.log(\"prediction\", this.prediction);\n\n                this.tree = this.treeToHtml(decisionTree.root);\n            },\n            treeToHtml(tree) {\n                // only leafs containing category\n                if (tree.category) {\n                    return  ['<ul>',\n                        '<li>',\n                        '<a href=\"#\">',\n                        '<b>', tree.category, '</b>',\n                        '</a>',\n                        '</li>',\n                        '</ul>'].join('');\n                }\n\n                return  ['<ul>',\n                    '<li>',\n                    '<a href=\"#\">',\n                    '<b>', tree.attribute, ' ', tree.predicateName, ' ', tree.pivot, ' ?</b>',\n                    '</a>',\n                    '<ul>',\n                    '<li>',\n                    '<a href=\"#\">yes</a>',\n                    this.treeToHtml(tree.match),\n                    '</li>',\n                    '<li>',\n                    '<a href=\"#\">no</a>',\n                    this.treeToHtml(tree.notMatch),\n                    '</li>',\n                    '</ul>',\n                    '</li>',\n                    '</ul>'].join('');\n            }\n        },\n        mounted() {\n            if(this.trainingSet.length) {\n                this.classify();\n            }\n        },\n        watch: {\n            // whenever the cluster prop changes, this function will run\n            trainingSet: function (newTrainingSet, oldTrainingSet) {\n                if(newTrainingSet.length) {\n                    this.trainingSet = newTrainingSet;\n                    this.classify();\n                }\n            }\n        }\n    }\n</script>\n<style lang=\"scss\">\n\n    .treeContainer {\n        text-align: center;\n    }\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLSimpleDecisionTreeClassifier.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLSimpleDecisionTreeClassifier.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MLSimpleDecisionTreeClassifier.vue?vue&type=template&id=5e612109&\"\nimport script from \"./MLSimpleDecisionTreeClassifier.vue?vue&type=script&lang=js&\"\nexport * from \"./MLSimpleDecisionTreeClassifier.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MLSimpleDecisionTreeClassifier.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"MLSimpleDecisionTreeClassifier.vue\"\nexport default component.exports","<template>\n    <div class=\"container mt-5\" id=\"main\">\n        <div class=\"selectionContainer\" v-if=\"element\">\n            <div class=\"row\">\n                <div class=\"col-md-6 img\">\n                    <img :src=\"element.img\">\n                </div>\n            </div>\n            <div class=\"row mt-5\">\n                <div class=\"col-md-3 m-auto\">\n                    <button v-on:click=\"addElementToTrainingSet(features[0])\" type=\"button\" class=\"btn btn-lg btn-outline-primary float-left\">{{ features[0] }}</button>\n                    <button v-on:click=\"addElementToTrainingSet(features[1])\" type=\"button\" class=\"btn btn-lg btn-outline-primary float-right\">{{ features[1] }}</button>\n                </div>\n            </div>\n        </div>\n        <div class=\"mt-5 text-center\">\n            <h2>Decision tree:</h2>\n            <!--<ml-cart-classifier v-bind:training-set=\"trainingSet\"></ml-cart-classifier>-->\n            <ml-simple-dt-classifier v-bind:training-set=\"trainingSet\" v-bind:element=\"element\"></ml-simple-dt-classifier>\n        </div>\n\n    </div>\n</template>\n\n<script>\n    import MLSimpleDecisionTreeClassifier from \"./components/MLSimpleDecisionTreeClassifier\";\n    import $ from 'jquery'\n\n    export default {\n        components: {\n            MLSimpleDecisionTreeClassifier\n        },\n        data() {\n            return {\n                allData: [],\n                trainingSet: [],\n                element: null,\n                features: []\n            }\n        },\n        computed: {},\n        methods: {\n            getTrainingSet() {\n                let instance = this;\n                $.getJSON(\"set.json\", function (object) {\n                    instance.allData = object.data;\n                    instance.features = object.features;\n                    instance.setRandomElementFromTrainingSet();\n                    console.log(instance.element);\n                });\n            },\n            setRandomElementFromTrainingSet() {\n                let index = Math.floor(Math.random() * this.allData.length);\n                this.element = this.allData[index];\n            },\n            addElementToTrainingSet(label) {\n                this.element.label = label;\n                this.trainingSet.push(this.element);\n                this.setRandomElementFromTrainingSet();\n                console.log(this.trainingSet);\n            }\n        },\n        mounted() {\n            this.getTrainingSet();\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    @import '~bootstrap/scss/bootstrap';\n    @import '~bootstrap-vue/dist/bootstrap-vue.css';\n\n    #main {\n\n    }\n\n    .tree * {\n        margin: 0;\n        padding: 0;\n    }\n\n    .selectionContainer {\n\n        text-align: center;\n\n        .col-md-6 {\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        img {\n            height: 250px;\n            padding: 15px;\n            border-radius: 10px;\n            border: 3px solid #3F51B5;\n        }\n    }\n\n    .tree {\n        display: inline-block;\n    }\n\n    .tree ul {\n        padding-top: 20px;\n        position: relative;\n\n        transition: all 0.5s;\n        -webkit-transition: all 0.5s;\n        -moz-transition: all 0.5s;\n    }\n\n    .tree li {\n        white-space: nowrap;\n        float: left;\n        text-align: center;\n        list-style-type: none;\n        position: relative;\n        padding: 20px 5px 0 5px;\n\n        transition: all 0.5s;\n        -webkit-transition: all 0.5s;\n        -moz-transition: all 0.5s;\n    }\n\n    /*We will use ::before and ::after to draw the connectors*/\n\n    .tree li::before, .tree li::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 50%;\n        border-top: 1px solid #3F51B5;\n        width: 50%;\n        height: 20px;\n    }\n\n    .tree li::after {\n        right: auto;\n        left: 50%;\n        border-left: 1px solid #3F51B5;\n    }\n\n    /*We need to remove left-right connectors from elements without\n     any siblings*/\n    .tree li:only-child::after, .tree li:only-child::before {\n        display: none;\n    }\n\n    /*Remove space from the top of single children*/\n    .tree li:only-child {\n        padding-top: 0;\n    }\n\n    /*Remove left connector from first child and\n     right connector from last child*/\n    .tree li:first-child::before, .tree li:last-child::after {\n        border: 0 none;\n    }\n\n    /*Adding back the vertical connector to the last nodes*/\n    .tree li:last-child::before {\n        border-right: 1px solid #3F51B5;\n        border-radius: 0 5px 0 0;\n        -webkit-border-radius: 0 5px 0 0;\n        -moz-border-radius: 0 5px 0 0;\n    }\n\n    .tree li:first-child::after {\n        border-radius: 5px 0 0 0;\n        -webkit-border-radius: 5px 0 0 0;\n        -moz-border-radius: 5px 0 0 0;\n    }\n\n    /*Time to add downward connectors from parents*/\n    .tree ul ul::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 50%;\n        border-left: 1px solid #3F51B5;\n        width: 0;\n        height: 20px;\n    }\n\n    .tree li a {\n        border: 1px solid #9C27B0;\n        padding: 5px 10px;\n        text-decoration: none;\n        color: #2196F3;\n        font-family: arial, verdana, tahoma;\n        font-size: 12px;\n        display: inline-block;\n\n        border-radius: 5px;\n        -webkit-border-radius: 5px;\n        -moz-border-radius: 5px;\n\n        transition: all 0.5s;\n        -webkit-transition: all 0.5s;\n        -moz-transition: all 0.5s;\n    }\n\n    /*Time for some hover effects*/\n    /*We will apply the hover effect the the lineage of the element also*/\n    .tree li a:hover, .tree li a:hover + ul li a {\n        background: #c8e4f8;\n        color: #000;\n        border: 1px solid #94a0b4;\n    }\n\n    /*Connector styles on hover*/\n    .tree li a:hover + ul li::after,\n    .tree li a:hover + ul li::before,\n    .tree li a:hover + ul::before,\n    .tree li a:hover + ul ul::before {\n        border-color: #94a0b4;\n    }\n\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=fd3e5a5e&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"App.vue\"\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"tree\",domProps:{\"innerHTML\":_vm._s(_vm.tree)}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"container\">\n        <div class=\"tree\" v-html=\"tree\"></div>\n    </div>\n</template>\n<script>\n    import Matrix from 'ml-matrix';\n    import {DecisionTreeClassifier as DTClassifier} from 'ml-cart';\n\n    export default {\n        props: [\n            'trainingSet'\n        ],\n        components: {\n        },\n        data() {\n            return {\n                tree: null\n            }\n        },\n        computed: {\n\n        },\n        methods: {\n            transformToMatrix(listOfFeatureMaps, classFieldName, ignoreFields = []) {\n                let instance = this;\n                let listOfVectors = listOfFeatureMaps.map((elem) => instance.transformFeatureMapToVector(elem, classFieldName, ignoreFields));\n\n                //console.log(\"List of vectors:\", listOfVectors);\n                // Add everything except for class\n                return new Matrix(listOfVectors);\n            },\n            transformFeatureMapToVector(featureMap, classFieldName, ignoreFields) {\n                // console.log(\"ignoreFields\", ignoreFields);\n                let returnVal = [];\n                // For every field, if it is not the class field, and it is not in the ignore list\n                // and it is a number\n                // add its value to the result list\n                Object.keys(featureMap).map((key, index) => {\n                    let val = featureMap[key];\n                    //console.log(\"Type of \" + key + \" field (\" + val + \"):\", typeof(val));\n\n                    if ((key !== classFieldName) && (ignoreFields.indexOf(key) < 0) && (typeof(val) === \"number\"))\n                    {\n                        //console.log(\"Pushing \" + key + \" with value \", val);\n                        returnVal.push(val);\n                    }\n\n                    // Throw warning for non-numbers\n                    if (typeof(val) !== \"number\" && (key !== classFieldName) && (ignoreFields.indexOf(key) < 0)) {\n                        console.log(\"Ignoring field \" + key + \" due to non numeric value: \", val );\n                    }\n                });\n\n                return returnVal;\n            },\n            getUniqueClasses(listOfFeatureMaps, classFieldName) {\n                // Keep a list of all the UNIQUE classes\n                let classEntries = [];\n                // For each item\n                listOfFeatureMaps.map((elem) => {\n                    // If it its class is NOT contained in the entries, add it to the class entries list\n                    if (classEntries.indexOf(elem[classFieldName]) < 0)\n                        classEntries.push(elem[classFieldName]);\n                });\n\n                return classEntries;\n            },\n            getClassVectorFromFeatureMap(listOfFeatureMaps, classFieldName) {\n\n                let classEntries = this.getUniqueClasses(listOfFeatureMaps, classFieldName);\n                // For each feature maps\n                // Get the index of the feature class in the classEntries array\n                return listOfFeatureMaps.map((elem) => classEntries.indexOf(elem[classFieldName]));\n            },\n            getClassesFromVector(listOfFeatureMaps, classFieldName, predictionsVector) {\n                let classEntries  = this.getUniqueClasses(listOfFeatureMaps, classFieldName);\n                return predictionsVector.map((classNum) => classEntries[classNum]);\n            },\n            getFieldNameForIndex(idx, listOfFeatureMaps, classFieldName, ignoreFields = []) {\n                // Get first instance (since fields are the same everywhere)\n                let featureMap = listOfFeatureMaps[0];\n                let returnKey;\n                Object.keys(featureMap).map((key, index) => {\n                    let val = featureMap[key];\n                    if ((key !== classFieldName) && (ignoreFields.indexOf(key) < 0) && (typeof(val) === \"number\")\n                        && (idx === index)) {\n                        returnKey = key;\n                    }\n                });\n\n                return returnKey;\n\n            },\n            getLeafLabel(probs, labels) {\n                let htmlText = \"\";\n                let iCnt = 0;\n                // For each probability\n                for (let p in probs) {\n                    // Get corresponding class\n                    let sClass = labels[iCnt];\n                    htmlText += \"- \" + sClass + \":\" + p + \" -\";\n\n                    iCnt++;\n                }\n                return htmlText;\n            },\n            treeToHtml(treeNode, listOfFeatureMaps, classFieldName, ignoreFields = []) {\n                if(treeNode === undefined)\n                    return 'none';\n                // only leafs containing category\n                if ((treeNode.left === undefined) && (treeNode.right === undefined)) {\n                    console.log(\"calc prediction\", this.getLeafLabel(treeNode.distribution.getRow(0), this.getUniqueClasses(listOfFeatureMaps, classFieldName)));\n\n                    return  ['<ul>',\n                        '<li>',\n                        '<a href=\"#\">',\n                        '<b>', this.getLeafLabel(treeNode.distribution.getRow(0), this.getUniqueClasses(listOfFeatureMaps, classFieldName)), '</b>',\n                        '</a>',\n                        '</li>',\n                        '</ul>'].join('');\n                }\n\n                return  ['<ul>',\n                    '<li>',\n                    '<a href=\"#\">',\n                    '<b>', this.getFieldNameForIndex(treeNode.splitColumn, listOfFeatureMaps, classFieldName, ignoreFields), ' ', \"<\", ' ', treeNode.splitValue, ' ?</b>',\n                    '</a>',\n                    '<ul>',\n                    '<li>',\n                    '<a href=\"#\">yes</a>',\n                    this.treeToHtml(treeNode.left, listOfFeatureMaps, classFieldName, ignoreFields),\n                    '</li>',\n                    '<li>',\n                    '<a href=\"#\">no</a>',\n                    this.treeToHtml(treeNode.right, listOfFeatureMaps, classFieldName, ignoreFields),\n                    '</li>',\n                    '</ul>',\n                    '</li>',\n                    '</ul>'].join('');\n            },\n            classify() {\n                console.log(\"training set \", this.trainingSet);\n                let trainingMatrix = this.transformToMatrix(this.trainingSet, 'sex');\n                let classVector = this.getClassVectorFromFeatureMap(this.trainingSet, 'sex');\n\n                console.log(\"Training matrix:\", trainingMatrix);\n                console.log(\"Class vector:\", classVector);\n\n                let options = {\n                    gainFunction: 'gini',\n                    maxDepth: 2,\n                    minNumSamples: 10\n                };\n\n                let predictions = classVector;\n                console.log(predictions);\n                let classifier = new DTClassifier(options);\n                classifier.train(trainingMatrix, predictions);\n                console.log(\"JSON\", classifier.toJSON());\n                let result = classifier.predict(trainingMatrix);\n                console.log(\"result\", result);\n                this.tree = this.treeToHtml(classifier.root, this.trainingSet, 'sex');\n            }\n        },\n        mounted() {\n            if(this.trainingSet.length) {\n                this.classify();\n            }\n        },\n        watch: {\n            // whenever the cluster prop changes, this function will run\n            trainingSet: function (newTrainingSet, oldTrainingSet) {\n                if(newTrainingSet.length) {\n                    this.trainingSet = newTrainingSet;\n                    this.classify();\n                }\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLCartClassifier.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLCartClassifier.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MLCartClassifier.vue?vue&type=template&id=d47fb844&\"\nimport script from \"./MLCartClassifier.vue?vue&type=script&lang=js&\"\nexport * from \"./MLCartClassifier.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MLCartClassifier.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"MLCartClassifier.vue\"\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\nimport BootstrapVue from 'bootstrap-vue'\nimport MLCartClassifier from './components/MLCartClassifier.vue';\nimport MLSimpleDecisionTreeClassifier from './components/MLSimpleDecisionTreeClassifier.vue';\n\nVue.use(BootstrapVue);\nVue.component('ml-cart-classifier', MLCartClassifier);\nVue.component('ml-simple-dt-classifier', MLSimpleDecisionTreeClassifier);\n\nnew Vue({\n  render: h => h(App)\n}).$mount(\"#app\");\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLCartClassifier.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLCartClassifier.vue?vue&type=style&index=0&lang=scss&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLSimpleDecisionTreeClassifier.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MLSimpleDecisionTreeClassifier.vue?vue&type=style&index=0&lang=scss&\""],"sourceRoot":""}